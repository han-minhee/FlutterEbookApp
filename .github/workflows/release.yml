name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## What's Changed
          
          - Bug fixes and improvements
          - Performance enhancements
          - UI/UX improvements
          
          ## Downloads
          
          Download the latest version for your platform:
          - **Android**: APK and App Bundle available
          - **Web**: Available for web browsers
          - **Desktop**: Windows, macOS, and Linux builds available
          
          ## Installation
          
          ### Android
          1. Download the APK file
          2. Enable "Install from unknown sources" in your device settings
          3. Install the APK
          
          ### Web
          Visit the web version at: [Your Web URL]
          
          ### Desktop
          1. Download the appropriate build for your platform
          2. Extract and run the application
        draft: false
        prerelease: false

  build-android:
    name: Build Android Release
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Get dependencies for packages
      run: |
        cd packages/reader_widget && flutter pub get
        cd ../components/commons && flutter pub get
        cd ../components/lcp && flutter pub get
        cd ../components/navigator && flutter pub get
        cd ../components/opds && flutter pub get
        cd ../components/server && flutter pub get
        cd ../components/shared && flutter pub get
        cd ../components/streamer && flutter pub get
        cd ../demo-app && flutter pub get
        
    - name: Build APK
      run: flutter build apk --release --split-per-abi
      
    - name: Build App Bundle
      run: flutter build appbundle --release
      
    - name: Upload APK (Universal)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/app/outputs/flutter-apk/app-release.apk
        asset_name: flutter_ebook_app-universal.apk
        asset_content_type: application/vnd.android.package-archive
        
    - name: Upload APK (ARM64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
        asset_name: flutter_ebook_app-arm64.apk
        asset_content_type: application/vnd.android.package-archive
        
    - name: Upload APK (ARM32)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
        asset_name: flutter_ebook_app-arm32.apk
        asset_content_type: application/vnd.android.package-archive
        
    - name: Upload App Bundle
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/app/outputs/bundle/release/app-release.aab
        asset_name: flutter_ebook_app.aab
        asset_content_type: application/octet-stream

  build-web:
    name: Build Web Release
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Get dependencies for packages
      run: |
        cd packages/reader_widget && flutter pub get
        cd ../components/commons && flutter pub get
        cd ../components/lcp && flutter pub get
        cd ../components/navigator && flutter pub get
        cd ../components/opds && flutter pub get
        cd ../components/server && flutter pub get
        cd ../components/shared && flutter pub get
        cd ../components/streamer && flutter pub get
        cd ../demo-app && flutter pub get
        
    - name: Build Web
      run: flutter build web --release --base-href "/flutter_ebook_app/"
      
    - name: Create Web Archive
      run: |
        cd build/web
        zip -r ../web-release.zip .
        
    - name: Upload Web Archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/web-release.zip
        asset_name: flutter_ebook_app-web.zip
        asset_content_type: application/zip

  build-desktop:
    name: Build Desktop Release
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: flutter_ebook_app-linux.tar.gz
          - os: windows-latest
            platform: windows
            artifact_name: flutter_ebook_app-windows.zip
          - os: macos-latest
            platform: macos
            artifact_name: flutter_ebook_app-macos.zip
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Get dependencies for packages
      run: |
        cd packages/reader_widget && flutter pub get
        cd ../components/commons && flutter pub get
        cd ../components/lcp && flutter pub get
        cd ../components/navigator && flutter pub get
        cd ../components/opds && flutter pub get
        cd ../components/server && flutter pub get
        cd ../components/shared && flutter pub get
        cd ../components/streamer && flutter pub get
        cd ../demo-app && flutter pub get
        
    - name: Build Desktop
      run: flutter build ${{ matrix.platform }} --release
      
    - name: Create Archive (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd build/linux/x64/release/bundle
        tar -czf ../../../${{ matrix.artifact_name }} .
        
    - name: Create Archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd build/windows/x64/runner/Release
        Compress-Archive -Path * -DestinationPath ../../../${{ matrix.artifact_name }}
        
    - name: Create Archive (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd build/macos/Build/Products/Release
        zip -r ../../../${{ matrix.artifact_name }} .
        
    - name: Upload Desktop Archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.artifact_name }}
        asset_content_type: application/octet-stream